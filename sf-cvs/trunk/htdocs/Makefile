# Manually written makefile to create translations for the Audacity website.
# Also used to provide simple ways to upload and download files to/from the
# sourceforge web servers.

# File names and locations
POT_FILE=locale/audacity_website.pot
PROG_POT_FILE=locale/audacity.pot
# the PHP include file that contains the includes to display the modification
# dates of the .pot files
INC_FILE=community/potdates.inc

# The authoritative (CVS managed) set of .po files)
PO_FILES_ORIG := $(wildcard locale/*.po)
# The set of po files copied out into the typical gettext file structure
# (with a clever piece of make string mangling which produces names like
# de/LC_MESSAGES/audacity_website.po relative to the locale directory)
PO_FILES := $(PO_FILES_ORIG:%.po=%/LC_MESSAGES/audacity_website.po)
# The paths to the compiled .mo files, the same as PO_FILES but with a
# different extension (more clever make patterns)
MO_FILES := $(PO_FILES:%.po=%.mo)

# Define the PHP files that are the "source code" for the website (relative to
# this directory)
SOURCES := $(wildcard *.php */*.php)

# This is what gets done if there isn't a target specified when make is run
all: $(MO_FILES) $(INC_FILE)

XGETTEXT=xgettext
XGETTEXT_ARGS=-L php --add-comments="i18n-hint" --from-code="UTF-8"

# Build the POT file (message catalog template) from the website sources.
$(POT_FILE): $(SOURCES)
	find . -name '*.php' ! -path './old/*' \
	  | xargs $(XGETTEXT) $(XGETTEXT_ARGS) -o $@

# Update the include file with the dates of the .pot files.
# (Note all the $ signs have to be doubled to get them past make's expansion.
# This passes single $ signs to the shell, where some of them have to be further
# escaped with \ characters in order to get them into the .inc file.
# The extraction of the dates relies on a shell that does command substitution
# using bash's $() syntax, which runs the command within the (), so may not
# work with all shells.)
# The variables with a single $() are Makefile variables which get expanded
# right at the beginning so their expanded values are used in the commands.
$(INC_FILE): $(POT_FILE) $(PROG_POT_FILE)
	echo "<?php // This file is auto-generated by the Makefile. Don't edit it because the changes will be lost" > $(INC_FILE)
	echo "\$$web_year = $$(date +%Y);" >> $(INC_FILE)
	echo "\$$web_month = $$(date +%-m);" >> $(INC_FILE)
	echo "\$$web_day = $$(date +%-d);" >> $(INC_FILE)
	echo "\$$prog_year = $$(date -r $(PROG_POT_FILE) +%Y);" >> $(INC_FILE)
	echo "\$$prog_month = $$(date -r $(PROG_POT_FILE) +%-m);" >> $(INC_FILE)
	echo "\$$prog_day = $$(date -r $(PROG_POT_FILE) +%-d);" >> $(INC_FILE)
	echo "?>" >> $(INC_FILE)

# Update the PO files (translated message catalogs).
%/LC_MESSAGES/audacity_website.po: %.po $(POT_FILE)
	mkdir -p $(@:%/audacity_website.po=%)
	locale/smartmsgmerge.py $< $(POT_FILE) $@
	cp -f $@ $<

# Compile the PO files into MO files.
# -f is for fuzzy string matching
# -v is for verbose
MSGFMT=msgfmt
MSGFMT_ARGS=-fv

%.mo: %.po
	$(MSGFMT) $(MSGFMT_ARGS) -o $@ $<

# automation of reverting .po files to the CVS versions after translation
# build has updated them from the .pot files
.PHONY: revert-po
revert-po:
	-rm -f locale/*.po
	-rm -f locale/.#*.po.*
	cvs up locale/

# Host / Project configuration
# ============================
# Variables in this section configure the project, host etc to use at
# Sourceforge.
# $SFUSER must be set from outside to a valid SF user name, but it will be 
# different for everyone who uses this file, so no point setting it here.
# project unix name
PROJECT=audacity
# host files are on
SFHOST=web.sourceforge.net
# where the files are kept. The trailing / is important.
PROJDIR=/home/groups/a/au/audacity/htdocs/

# Internal configuration stuff (applies to all projects)
# Options to all rsync commands:
#RSYNCOPTS=-vrchlO --delete-during --rsh=ssh --exclude '*~'
RSYNCOPTS=-vrchlO --delete-during --rsh=ssh --exclude '*~' --exclude '*.po'
# -v Verbose mode transfers
# -r Recursive transfer of whole dir tree
## -t transfer modification times of files
# -c Use file's md4 checksums to see if they need to be transfered (slower but
#    more reliable than using size and modtimes of files)
# -h Output data in human-readable formats
# -l Preserve links in the uploaded data
# -O Ommit directory modification times (because they are largely meaningless)
#--delete-during	delete deleted files as they are found (uses minimum disk
#					space but is safe against aborted transfers)
#--exclude '*~'		avoid moving editor temp files
#--exclude '*.po'	don't move .po files (source code of translations) to/from
#					server because it can't use them (it only wants the .mo
#					compiled versions)
RSYNCOPTS+=--exclude 'CVS' --exclude '.cvsignore' --exclude '.*.swp'
# Exclude CVS files we don't need on the server
# Exclude vim swapfiles from being synced
RSYNCOPTS+=--exclude '*.bak' --exclude '/files' --itemize-changes
# Exclude backup files from windows editors as well
# Exclude the contents of the /files directory used to host temporary download
# files.
# --itemize-changes 	show what is being changed on each file as it happens
# construct some longer strings to use in commands
UPLOADURL=$(SFUSER),$(PROJECT)@$(SFHOST):$(PROJDIR)

pull:
	rsync $(RSYNCOPTS) $(UPLOADURL) .

pretend-pull:
	rsync $(RSYNCOPTS) --dry-run $(UPLOADURL) .


push:
	rsync $(RSYNCOPTS) . $(UPLOADURL)

pretend-push:
	rsync $(RSYNCOPTS) --dry-run . $(UPLOADURL)
